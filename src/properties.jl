export position, velocity, sideboosters, force, thrust, Isp, mass, propellant, max_propellant

position(r::SpaceVehicle) = r.body.position
velocity(r::SpaceVehicle) = r.body.velocity

sideboosters(dummy) = Rocket[]
sideboosters(ship::SpaceVehicle) = sideboosters(ship.active_stage)
sideboosters(r::Rocket) = r.sideboosters

name(engine::SingleEngine)  = engine.name
name(cluster::EngineCluster) = name(cluster.engine) 


###################### throttle #############################################
min_throttle(engine::SingleEngine) = engine.min_throttle
min_throttle(cluster::EngineCluster) = min_throttle(cluster.engine)

###################### thrust #############################################
thrust(r::SpaceVehicle) = thrust(r.active_stage)
thrust(payload::Payload) = 0.0

"""
    thrust(r::Rocket)
Thrust (force) generated by the engines of the bottom stage core and its attached side boosters.
"""
function thrust(r::Rocket) :: Real
    @assert (min_throttle(r.engine) <= r.throttle <= 1.0) || r.throttle == 0
    core_thrust = thrust(r.engine) * clamp(r.throttle, min_throttle(r.engine), 1.0)
    thrustdata = thrust.(r.sideboosters) :: Array{<:Real}
    booster_thrust = sum(thrustdata)
    core_thrust + booster_thrust
end

thrust(engine::SingleEngine)   :: Real  = engine.thrust
thrust(cluster::EngineCluster) :: Real  = thrust(cluster.engine) * cluster.count

"Specific impulse of engine. A measure of propellant efficiency of engine."
Isp(engine::SingleEngine)   = engine.Isp
Isp(cluster::EngineCluster) = Isp(cluster.engine)

###################### mass #############################################
mass(paylod::NoPayload)      = 0.0
mass(ship::SpaceVehicle)     = mass(ship.active_stage)
mass(payload::Payload)       = error("mass not defined for ", typeof(payload))
mass(sattelite::Satellite)   = sattelite.mass
mass(capsule::Capsule)       = capsule.mass

"""
    mass(r::Rocket)
Total mass of rocket. Includes mass of empty tanks, propellant in tanks, the egines,
and any attached side boosters and the mass of the payload. The payload could be another
rocket stage.
"""
function mass(r::Rocket)
    booster_mass = mapreduce(mass, +, r.sideboosters, init = 0.0)
    tank_mass = mass(r.tank) + r.propellant
    mass(r.payload) + tank_mass + mass(r.engine) + booster_mass
end

mass(engine::SingleEngine)   = engine.mass
mass(cluster::EngineCluster) = mass(cluster.engine) * cluster.count
mass(tank::Tank) = tank.dry_mass

propellant(non_rocket) = 0.0
propellant(r::SpaceVehicle)    = propellant(r.active_stage)

"""
    propellant(r::Rocket)
Total propellant mass in core stage of a rocket, excluding side boosters
"""
propellant(r::Rocket)          = r.propellant

max_propellant(t::Tank)        = t.total_mass - t.dry_mass
